#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Collection de contr√¥les de base avec diff√©rents styles

Ce fichier d√©montre :
- Diff√©rents styles de boutons
- Configuration de widgets
- Placement automatique
- Interaction avec multiple widgets

Ex√©cution :
    python basic_controls.py
"""

import sys
from PySide6.QtCore import QPoint
from dragdropwidgets import create_app, DraggableButton, DraggableLabel


def main():
    """Fonction principale pour d√©montrer les contr√¥les basiques"""
    # Cr√©er l'application
    app, window, drop_zone = create_app("Contr√¥les Basiques - DragDropWidgets", (800, 600))
    
    print("üé® D√©monstration des contr√¥les basiques")
    print("=" * 50)
    print("Styles de boutons disponibles:")
    print("‚Ä¢ Primary (Bleu) - Action principale")
    print("‚Ä¢ Success (Vert) - Action positive")
    print("‚Ä¢ Danger (Rouge) - Action destructive")
    print("‚Ä¢ Warning (Orange) - Attention")
    print("‚Ä¢ Info (Cyan) - Information")
    print("‚Ä¢ Secondary (Gris) - Action secondaire")
    print("=" * 50)
    
    # Configuration de la grille
    drop_zone.set_grid_visible(True)
    drop_zone.grid_size = 25
    
    # Titre principal
    title = DraggableLabel("Galerie de Contr√¥les Basiques")
    title.set_style_preset('title')
    title.set_font_size(20)
    drop_zone.add_widget(title, QPoint(50, 50))
    
    # Diff√©rents styles de boutons avec leurs caract√©ristiques
    button_styles = [
        ("Bouton Primaire", "primary", "Action principale du formulaire"),
        ("Bouton Succ√®s", "success", "Confirmer une action positive"),
        ("Bouton Danger", "danger", "Action potentiellement destructive"),
        ("Bouton Avertissement", "warning", "Action n√©cessitant attention"),
        ("Bouton Info", "info", "Affichage d'informations"),
        ("Bouton Secondaire", "secondary", "Action secondaire ou annulation")
    ]
    
    # Cr√©er et placer les boutons
    buttons = []
    for i, (text, style, description) in enumerate(button_styles):
        # Cr√©er le bouton
        btn = DraggableButton(text)
        btn.set_style(style)
        btn.set_snap_to_grid(True, 25)
        
        # Cr√©er une description
        desc_label = DraggableLabel(description)
        desc_label.set_font_size(10)
        desc_label.set_style_preset('caption')
        desc_label.set_snap_to_grid(True, 25)
        
        # Calculer les positions
        x_pos = 50
        y_pos = 120 + i * 80
        
        # Ajouter √† la zone de d√©p√¥t
        drop_zone.add_widget(btn, QPoint(x_pos, y_pos))
        drop_zone.add_widget(desc_label, QPoint(x_pos + 200, y_pos + 5))
        
        buttons.append((btn, style, text))
    
    # Zone d'interaction √† droite
    interaction_title = DraggableLabel("Zone d'Interaction")
    interaction_title.set_style_preset('subtitle')
    interaction_title.set_font_size(16)
    drop_zone.add_widget(interaction_title, QPoint(500, 120))
    
    # Label de statut
    status_label = DraggableLabel("Cliquez sur un bouton pour voir l'action")
    status_label.set_style_preset('info')
    status_label.resize(250, 60)
    status_label.set_word_wrap(True)
    drop_zone.add_widget(status_label, QPoint(500, 160))
    
    # Compteur de clics
    click_counter = {"count": 0}
    counter_label = DraggableLabel("Clics: 0")
    counter_label.set_style_preset('body')
    drop_zone.add_widget(counter_label, QPoint(500, 240))
    
    # Bouton de r√©initialisation
    reset_btn = DraggableButton("R√©initialiser")
    reset_btn.set_style('secondary')
    drop_zone.add_widget(reset_btn, QPoint(500, 280))
    
    # Gestionnaire d'√©v√©nements centralis√©
    def handle_button_click(widget_id, button_info=None):
        """Gestionnaire centralis√© pour tous les clics de boutons"""
        click_counter["count"] += 1
        counter_label.set_text(f"Clics: {click_counter['count']}")
        
        if button_info:
            btn, style, text = button_info
            status_message = f"Action '{style}' ex√©cut√©e!\nBouton: {text}"
            status_label.set_text(status_message)
            
            # Animation visuelle simple : changer temporairement le texte
            original_text = btn.get_text()
            btn.set_text("Cliqu√©! ‚úì")
            
            # Remettre le texte original apr√®s 1 seconde
            from PySide6.QtCore import QTimer
            timer = QTimer()
            timer.singleShot(1000, lambda: btn.set_text(original_text))
            
            print(f"üî• {style.upper()}: {text} - Clic #{click_counter['count']}")
    
    def reset_interactions():
        """R√©initialiser les interactions"""
        click_counter["count"] = 0
        counter_label.set_text("Clics: 0")
        status_label.set_text("Compteurs r√©initialis√©s!")
        print("üîÑ Interactions r√©initialis√©es")
    
    # Connecter les signaux pour chaque bouton
    for btn, style, text in buttons:
        btn.button_clicked.connect(
            lambda widget_id, info=(btn, style, text): handle_button_click(widget_id, info)
        )
    
    # Connecter le bouton de r√©initialisation
    reset_btn.button_clicked.connect(lambda _: reset_interactions())
    
    # Cr√©er quelques contr√¥les additionnels
    
    # Bouton activable/d√©sactivable
    toggle_btn = DraggableButton("Bouton Activable")
    toggle_btn.set_checkable(True)  # Rendre le bouton toggleable
    toggle_btn.set_style('info')
    drop_zone.add_widget(toggle_btn, QPoint(500, 350))
    
    toggle_status = DraggableLabel("√âtat: D√©sactiv√©")
    toggle_status.set_font_size(10)
    drop_zone.add_widget(toggle_status, QPoint(500, 390))
    
    def handle_toggle(widget_id):
        """Gestionnaire pour le bouton toggle"""
        is_checked = toggle_btn.is_checked()
        if is_checked:
            toggle_btn.set_text("D√©sactiver")
            toggle_btn.set_style('success')
            toggle_status.set_text("√âtat: Activ√© ‚úì")
            toggle_status.set_style_preset('success')
        else:
            toggle_btn.set_text("Bouton Activable")
            toggle_btn.set_style('info')
            toggle_status.set_text("√âtat: D√©sactiv√©")
            toggle_status.set_style_preset('body')
        
        print(f"üîÄ Toggle: {'Activ√©' if is_checked else 'D√©sactiv√©'}")
    
    toggle_btn.button_clicked.connect(handle_toggle)
    
    # Instructions finales
    final_instructions = DraggableLabel(
        "üí° Astuce: Tous les widgets peuvent √™tre d√©plac√©s par glisser-d√©poser!"
    )
    final_instructions.set_style_preset('warning')
    final_instructions.set_font_size(11)
    final_instructions.resize(300, 40)
    final_instructions.set_word_wrap(True)
    drop_zone.add_widget(final_instructions, QPoint(50, 520))
    
    # Afficher la fen√™tre
    window.show()
    
    print(f"üì± Application lanc√©e: {len(buttons)} boutons cr√©√©s")
    return app.exec()


if __name__ == "__main__":
    try:
        sys.exit(main())
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution: {e}")
        sys.exit(1)