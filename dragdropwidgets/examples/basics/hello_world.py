#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Premier exemple simple - Cr√©ation d'une interface basique

Ce fichier d√©montre les concepts de base du syst√®me DragDropWidgets :
- Cr√©ation d'une application simple
- Ajout de widgets draggables
- Configuration basique des styles

Ex√©cution :
    python hello_world.py
"""

import sys
from PySide6.QtCore import QPoint
from dragdropwidgets import create_app, DraggableButton, DraggableLabel


def main():
    """Fonction principale de l'exemple Hello World"""
    # Cr√©er l'application et la fen√™tre principale
    app, window, drop_zone = create_app("Hello World - DragDropWidgets", (600, 400))
    
    print("üöÄ D√©marrage de l'exemple Hello World")
    print("=" * 50)
    print("Instructions:")
    print("‚Ä¢ Cliquez et faites glisser les widgets")
    print("‚Ä¢ Le bouton est cliquable")
    print("‚Ä¢ Fermez la fen√™tre pour quitter")
    print("=" * 50)
    
    # Cr√©er un bouton simple
    button = DraggableButton("Hello World!")
    button.set_style('primary')  # Style bleu primaire
    
    # Cr√©er un label informatif
    label = DraggableLabel("Bienvenue dans DragDropWidgets!")
    label.set_font_size(16)
    label.set_style_preset('title')
    
    # Cr√©er un second label avec instructions
    instructions = DraggableLabel("Faites glisser les widgets pour les d√©placer")
    instructions.set_font_size(12)
    instructions.set_style_preset('info')
    
    # Ajouter les widgets √† la zone de d√©p√¥t avec des positions sp√©cifiques
    drop_zone.add_widget(button, QPoint(100, 100))
    drop_zone.add_widget(label, QPoint(100, 200))
    drop_zone.add_widget(instructions, QPoint(100, 280))
    
    # Activer la grille pour un placement plus pr√©cis
    drop_zone.set_grid_visible(True)
    drop_zone.grid_size = 20
    
    # Configurer le snap-to-grid pour tous les widgets
    for widget in [button, label, instructions]:
        if hasattr(widget, 'set_snap_to_grid'):
            widget.set_snap_to_grid(True, 20)
    
    # Gestionnaire d'√©v√©nements pour le bouton
    def on_button_click(widget_id):
        """Gestionnaire de clic sur le bouton"""
        print(f"‚úÖ Bouton cliqu√©! ID: {widget_id}")
        # Changer le texte du bouton
        button.set_text("Bouton cliqu√©!")
        button.set_style('success')  # Changer en vert
        
        # Mettre √† jour le label
        label.set_text("Excellent! Le bouton fonctionne!")
        label.set_style_preset('success')
    
    # Connecter le signal du bouton
    button.button_clicked.connect(on_button_click)
    
    # Afficher la fen√™tre et d√©marrer la boucle d'√©v√©nements
    window.show()
    
    print(f"üì± Fen√™tre affich√©e: {window.windowTitle()}")
    return app.exec()


if __name__ == "__main__":
    try:
        sys.exit(main())
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution: {e}")
        sys.exit(1)