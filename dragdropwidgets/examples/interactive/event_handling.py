#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Gestion avanc√©e des √©v√©nements et interactions

Ce fichier d√©montre :
- Syst√®me d'√©v√©nements centralis√©
- Communication entre widgets
- √âv√©nements personnalis√©s
- Historique des √©v√©nements
- Gestion des priorit√©s

Ex√©cution :
    python event_handling.py
"""

import sys
from datetime import datetime
from PySide6.QtCore import QPoint, QTimer
from dragdropwidgets import create_app, DraggableButton, DraggableLabel
from dragdropwidgets.utils.events import event_manager, WidgetEvents, EventPriority


def main():
    """Fonction principale pour d√©montrer la gestion d'√©v√©nements"""
    app, window, drop_zone = create_app("Gestion d'√âv√©nements - DragDropWidgets", (1200, 900))
    
    print("‚ö° D√©monstration de la gestion d'√©v√©nements")
    print("=" * 60)
    print("Types d'√©v√©nements:")
    print("‚Ä¢ √âv√©nements de widgets (clic, d√©placement)")
    print("‚Ä¢ √âv√©nements personnalis√©s")
    print("‚Ä¢ Communication inter-widgets")
    print("‚Ä¢ Historique et priorit√©s")
    print("‚Ä¢ Gestionnaires globaux et locaux")
    print("=" * 60)
    
    # Configuration de la grille
    drop_zone.set_grid_visible(True)
    drop_zone.grid_size = 25
    
    # Titre principal
    title = DraggableLabel("Syst√®me de Gestion d'√âv√©nements")
    title.set_style_preset('title')
    title.set_font_size(22)
    drop_zone.add_widget(title, QPoint(50, 25))
    
    # Section 1: √âmetteurs d'√©v√©nements
    emitters_title = DraggableLabel("1. √âmetteurs d'√âv√©nements")
    emitters_title.set_style_preset('subtitle')
    emitters_title.set_font_size(16)
    drop_zone.add_widget(emitters_title, QPoint(50, 80))
    
    # Boutons √©metteurs avec diff√©rents types d'√©v√©nements
    emitter_configs = [
        ("√âv√©nement Simple", "simple_event", "primary"),
        ("√âv√©nement Prioritaire", "priority_event", "warning"),
        ("√âv√©nement en Cha√Æne", "chain_event", "info"),
        ("√âv√©nement d'Erreur", "error_event", "danger"),
        ("Diffusion Globale", "broadcast_event", "success")
    ]
    
    emitters = []
    for i, (text, event_type, style) in enumerate(emitter_configs):
        btn = DraggableButton(text)
        btn.set_style(style)
        btn.set_snap_to_grid(True, 25)
        drop_zone.add_widget(btn, QPoint(70, 120 + i * 50))
        emitters.append((btn, event_type, text))
    
    # Section 2: R√©cepteurs d'√©v√©nements
    receivers_title = DraggableLabel("2. R√©cepteurs d'√âv√©nements")
    receivers_title.set_style_preset('subtitle')
    receivers_title.set_font_size(16)
    drop_zone.add_widget(receivers_title, QPoint(350, 80))
    
    # Labels r√©cepteurs qui changent selon les √©v√©nements
    receiver_configs = [
        ("R√©cepteur 1", "info"),
        ("R√©cepteur 2", "success"),
        ("R√©cepteur 3", "warning"),
        ("R√©cepteur Global", "error")
    ]
    
    receivers = []
    for i, (text, style) in enumerate(receiver_configs):
        label = DraggableLabel(text)
        label.set_style_preset(style)
        label.set_font_size(12)
        label.set_snap_to_grid(True, 25)
        drop_zone.add_widget(label, QPoint(370, 120 + i * 50))
        receivers.append(label)
    
    # Section 3: Console d'√©v√©nements
    console_title = DraggableLabel("3. Console d'√âv√©nements")
    console_title.set_style_preset('subtitle') 
    console_title.set_font_size(16)
    drop_zone.add_widget(console_title, QPoint(650, 80))
    
    # Zone d'affichage des √©v√©nements
    event_display = DraggableLabel("=== CONSOLE D'√âV√âNEMENTS ===\nEn attente d'√©v√©nements...")
    event_display.resize(400, 200)
    event_display.set_background_color("#f8f9fa")
    event_display.set_font_size(10)
    event_display.set_alignment('left')
    event_display.set_word_wrap(True)
    drop_zone.add_widget(event_display, QPoint(670, 120))
    
    # Section 4: Statistiques d'√©v√©nements
    stats_title = DraggableLabel("4. Statistiques")
    stats_title.set_style_preset('subtitle')
    stats_title.set_font_size(16)
    drop_zone.add_widget(stats_title, QPoint(50, 380))
    
    # Compteurs d'√©v√©nements
    event_stats = {
        'total_events': 0,
        'simple_events': 0,
        'priority_events': 0,
        'chain_events': 0,
        'error_events': 0,
        'broadcast_events': 0
    }
    
    stats_labels = {}
    stats_configs = [
        ('total_events', 'Total √âv√©nements'),
        ('simple_events', '√âv√©nements Simples'),
        ('priority_events', '√âv√©nements Prioritaires'),
        ('chain_events', '√âv√©nements en Cha√Æne'),
        ('error_events', '√âv√©nements d\'Erreur'),
        ('broadcast_events', 'Diffusions Globales')
    ]
    
    for i, (key, name) in enumerate(stats_configs):
        stat_name = DraggableLabel(f"{name}:")
        stat_name.set_font_size(11)
        drop_zone.add_widget(stat_name, QPoint(70, 420 + i * 25))
        
        stat_value = DraggableLabel("0")
        stat_value.set_font_size(12)
        stat_value.set_font_bold(True)
        stat_value.set_color("#2980b9")
        drop_zone.add_widget(stat_value, QPoint(250, 420 + i * 25))
        
        stats_labels[key] = stat_value
    
    # Section 5: Contr√¥les syst√®me
    controls_title = DraggableLabel("5. Contr√¥les Syst√®me")
    controls_title.set_style_preset('subtitle')
    controls_title.set_font_size(16)
    drop_zone.add_widget(controls_title, QPoint(350, 380))
    
    # Boutons de contr√¥le
    clear_btn = DraggableButton("Effacer Console")
    clear_btn.set_style('warning')
    drop_zone.add_widget(clear_btn, QPoint(370, 420))
    
    reset_stats_btn = DraggableButton("Reset Statistiques")
    reset_stats_btn.set_style('info')
    drop_zone.add_widget(reset_stats_btn, QPoint(370, 470))
    
    history_btn = DraggableButton("Voir Historique")
    history_btn.set_style('secondary')
    drop_zone.add_widget(history_btn, QPoint(370, 520))
    
    # Section 6: Tests avanc√©s
    advanced_title = DraggableLabel("6. Tests Avanc√©s")
    advanced_title.set_style_preset('subtitle')
    advanced_title.set_font_size(16)
    drop_zone.add_widget(advanced_title, QPoint(650, 380))
    
    # Boutons de test
    cascade_btn = DraggableButton("Test Cascade")
    cascade_btn.set_style('info')
    drop_zone.add_widget(cascade_btn, QPoint(670, 420))
    
    flood_btn = DraggableButton("Test Flood")
    flood_btn.set_style('warning')
    drop_zone.add_widget(flood_btn, QPoint(790, 420))
    
    simulation_btn = DraggableButton("Simulation Auto")
    simulation_btn.set_style('success')
    drop_zone.add_widget(simulation_btn, QPoint(670, 470))
    
    # √âtat du syst√®me
    system_state = {
        'simulation_running': False,
        'event_history': []
    }
    
    # Fonctions utilitaires
    def log_event(message, event_type="INFO"):
        """Ajouter un message √† la console d'√©v√©nements"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        current_text = event_display.get_text()
        
        # Garder seulement les 15 derni√®res lignes
        lines = current_text.split('\n')
        if len(lines) > 15:
            lines = lines[-15:]
        
        new_line = f"[{timestamp}] {event_type}: {message}"
        lines.append(new_line)
        
        event_display.set_text('\n'.join(lines))
        
        # Ajouter √† l'historique
        system_state['event_history'].append({
            'timestamp': timestamp,
            'type': event_type,
            'message': message
        })
        
        print(f"üìù [{timestamp}] {event_type}: {message}")
    
    def update_stats(event_type_key):
        """Mettre √† jour les statistiques"""
        event_stats['total_events'] += 1
        if event_type_key in event_stats:
            event_stats[event_type_key] += 1
        
        # Mettre √† jour l'affichage
        for key, label in stats_labels.items():
            label.set_text(str(event_stats[key]))
    
    # Gestionnaires d'√©v√©nements
    
    def handle_simple_event(event):
        """Gestionnaire pour √©v√©nement simple"""
        log_event(f"√âv√©nement simple re√ßu de {event.source.__class__.__name__}", "SIMPLE")
        receivers[0].set_text("R√©cepteur 1: ‚úì Simple")
        receivers[0].set_style_preset('success')
        update_stats('simple_events')
    
    def handle_priority_event(event):
        """Gestionnaire pour √©v√©nement prioritaire"""
        log_event(f"√âv√©nement PRIORITAIRE re√ßu!", "PRIORITY")
        receivers[1].set_text("R√©cepteur 2: ‚ö° Priorit√©")
        receivers[1].set_style_preset('warning')
        update_stats('priority_events')
        
        # D√©clencher un √©v√©nement en cascade
        event_manager.emit_event('cascade_response', source=event.source, 
                                data={'original_event': 'priority'})
    
    def handle_chain_event(event):
        """Gestionnaire pour √©v√©nement en cha√Æne"""
        log_event(f"√âv√©nement en cha√Æne d√©marr√©", "CHAIN")
        receivers[2].set_text("R√©cepteur 3: üîó Cha√Æne")
        receivers[2].set_style_preset('info')
        update_stats('chain_events')
        
        # Cr√©er une cha√Æne d'√©v√©nements
        for i in range(3):
            event_manager.emit_event(f'chain_link_{i}', source=event.source,
                                   data={'link_number': i, 'chain_id': 'main'})
    
    def handle_error_event(event):
        """Gestionnaire pour √©v√©nement d'erreur"""
        log_event(f"ERREUR simul√©e d√©tect√©e!", "ERROR")
        receivers[3].set_text("R√©cepteur Global: ‚ùå Erreur")
        receivers[3].set_style_preset('error')
        update_stats('error_events')
        
        # Simuler une r√©cup√©ration d'erreur
        QTimer.singleShot(2000, lambda: log_event("Syst√®me r√©cup√©r√© de l'erreur", "RECOVERY"))
    
    def handle_broadcast_event(event):
        """Gestionnaire pour diffusion globale"""
        log_event(f"DIFFUSION GLOBALE √† tous les r√©cepteurs!", "BROADCAST")
        
        # Affecter tous les r√©cepteurs
        messages = ["üì° Broadcast", "üì° Global", "üì° Diffusion", "üì° Re√ßu"]
        for i, (receiver, msg) in enumerate(zip(receivers, messages)):
            receiver.set_text(f"R√©cepteur {i+1}: {msg}")
            receiver.set_style_preset('success')
        
        update_stats('broadcast_events')
    
    def handle_cascade_response(event):
        """Gestionnaire pour r√©ponse en cascade"""
        original = event.data.get('original_event', 'unknown')
        log_event(f"Cascade d√©clench√©e par √©v√©nement {original}", "CASCADE")
    
    def handle_chain_link(event):
        """Gestionnaire pour maillon de cha√Æne"""
        link_num = event.data.get('link_number', 0)
        log_event(f"Maillon de cha√Æne #{link_num} trait√©", "LINK")
    
    def handle_widget_moved(event):
        """Gestionnaire pour d√©placement de widget"""
        widget = event.source
        position = event.data.get('position', 'unknown')
        log_event(f"Widget {widget.__class__.__name__} d√©plac√©", "MOVE")
    
    def handle_widget_selected(event):
        """Gestionnaire pour s√©lection de widget"""
        widget = event.source
        log_event(f"Widget {widget.__class__.__name__} s√©lectionn√©", "SELECT")
    
    # Gestionnaire global pour tous les √©v√©nements
    def global_event_handler(event):
        """Gestionnaire global qui intercepte tous les √©v√©nements"""
        if hasattr(event, 'event_type') and not event.event_type.startswith('global_'):
            # √âviter la r√©cursion infinie
            pass  # Le logging est d√©j√† fait dans les gestionnaires sp√©cifiques
    
    # Enregistrement des gestionnaires d'√©v√©nements
    event_manager.register_event('simple_event', handle_simple_event)
    event_manager.register_event('priority_event', handle_priority_event, priority=EventPriority.HIGH)
    event_manager.register_event('chain_event', handle_chain_event)
    event_manager.register_event('error_event', handle_error_event)
    event_manager.register_event('broadcast_event', handle_broadcast_event)
    event_manager.register_event('cascade_response', handle_cascade_response)
    
    # Gestionnaires pour les maillons de cha√Æne
    for i in range(3):
        event_manager.register_event(f'chain_link_{i}', handle_chain_link)
    
    # Gestionnaires pour √©v√©nements de widgets
    event_manager.register_event(WidgetEvents.WIDGET_MOVED, handle_widget_moved)
    event_manager.register_event(WidgetEvents.WIDGET_SELECTED, handle_widget_selected)
    
    # Gestionnaire global
    event_manager.register_global_handler(global_event_handler)
    
    # Connexion des boutons √©metteurs
    def create_emitter_handler(event_type):
        """Cr√©er un gestionnaire pour √©metteur d'√©v√©nement"""
        def handler(widget_id):
            event_manager.emit_event(event_type, source=None, 
                                   data={'timestamp': datetime.now().isoformat()})
        return handler
    
    for btn, event_type, text in emitters:
        btn.button_clicked.connect(create_emitter_handler(event_type))
    
    # Fonctions des boutons de contr√¥le
    def clear_console():
        """Effacer la console"""
        event_display.set_text("=== CONSOLE D'√âV√âNEMENTS ===\nConsole effac√©e.")
        log_event("Console d'√©v√©nements effac√©e", "SYSTEM")
    
    def reset_statistics():
        """R√©initialiser les statistiques"""
        for key in event_stats:
            event_stats[key] = 0
        for label in stats_labels.values():
            label.set_text("0")
        log_event("Statistiques r√©initialis√©es", "SYSTEM")
    
    def show_history():
        """Afficher l'historique des √©v√©nements"""
        history_count = len(system_state['event_history'])
        recent_events = system_state['event_history'][-5:] if system_state['event_history'] else []
        
        history_text = f"Historique: {history_count} √©v√©nements\n"
        for event_info in recent_events:
            history_text += f"‚Ä¢ [{event_info['timestamp']}] {event_info['type']}\n"
        
        event_display.set_text(history_text)
        log_event(f"Historique affich√© ({history_count} √©v√©nements)", "SYSTEM")
    
    def test_cascade():
        """Test d'√©v√©nements en cascade"""
        log_event("D√©but du test en cascade", "TEST")
        event_manager.emit_event('priority_event', source=None, data={'test': 'cascade'})
        QTimer.singleShot(1000, lambda: event_manager.emit_event('chain_event', source=None))
        QTimer.singleShot(2000, lambda: log_event("Test en cascade termin√©", "TEST"))
    
    def test_flood():
        """Test d'inondation d'√©v√©nements"""
        log_event("D√©but du test d'inondation (10 √©v√©nements)", "TEST")
        for i in range(10):
            QTimer.singleShot(i * 100, lambda idx=i: event_manager.emit_event(
                'simple_event', source=None, data={'flood_index': idx}))
        QTimer.singleShot(1100, lambda: log_event("Test d'inondation termin√©", "TEST"))
    
    def toggle_simulation():
        """Basculer la simulation automatique"""
        system_state['simulation_running'] = not system_state['simulation_running']
        
        if system_state['simulation_running']:
            simulation_btn.set_text("Arr√™ter Simulation")
            simulation_btn.set_style('danger')
            log_event("Simulation automatique d√©marr√©e", "SYSTEM")
            start_auto_simulation()
        else:
            simulation_btn.set_text("Simulation Auto")
            simulation_btn.set_style('success')
            log_event("Simulation automatique arr√™t√©e", "SYSTEM")
    
    def start_auto_simulation():
        """D√©marrer la simulation automatique"""
        if system_state['simulation_running']:
            import random
            event_types = ['simple_event', 'priority_event', 'chain_event', 'broadcast_event']
            random_event = random.choice(event_types)
            event_manager.emit_event(random_event, source=None, data={'auto': True})
            
            # Programmer le prochain √©v√©nement
            QTimer.singleShot(random.randint(2000, 5000), start_auto_simulation)
    
    # Connexion des boutons de contr√¥le
    clear_btn.button_clicked.connect(lambda _: clear_console())
    reset_stats_btn.button_clicked.connect(lambda _: reset_statistics())
    history_btn.button_clicked.connect(lambda _: show_history())
    cascade_btn.button_clicked.connect(lambda _: test_cascade())
    flood_btn.button_clicked.connect(lambda _: test_flood())
    simulation_btn.button_clicked.connect(lambda _: toggle_simulation())
    
    # Instructions
    instructions = DraggableLabel(
        "üéØ D√©monstration compl√®te du syst√®me d'√©v√©nements:\n"
        "‚Ä¢ Cliquez sur les boutons √©metteurs pour d√©clencher des √©v√©nements\n"
        "‚Ä¢ Observez les r√©actions dans les r√©cepteurs et la console\n"
        "‚Ä¢ Utilisez les contr√¥les pour tester des sc√©narios avanc√©s\n"
        "‚Ä¢ D√©placez des widgets pour voir les √©v√©nements de mouvement\n"
        "‚Ä¢ La simulation automatique g√©n√®re des √©v√©nements al√©atoires"
    )
    instructions.set_style_preset('info')
    instructions.set_font_size(11)
    instructions.resize(500, 100)
    instructions.set_word_wrap(True)
    drop_zone.add_widget(instructions, QPoint(50, 580))
    
    # Message de bienvenue initial
    log_event("Syst√®me d'√©v√©nements initialis√©", "SYSTEM")
    log_event("Pr√™t √† recevoir et traiter les √©v√©nements", "READY")
    
    # Afficher la fen√™tre
    window.show()
    
    print(f"üì± Syst√®me d'√©v√©nements lanc√© avec {len(emitters)} √©metteurs et {len(receivers)} r√©cepteurs")
    return app.exec()


if __name__ == "__main__":
    try:
        sys.exit(main())
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution: {e}")
        sys.exit(1)